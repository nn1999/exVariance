include: '../common.snakemake'

import shutil

root_dir=config.get('root_dir')
data_dir=config.get('data_dir')
output_dir=config.get('output_dir')

rule all:
    input:
        expand('{output_dir}/fastqc/{sample_id}_{mate_index}_fastqc.html',output_dir=output_dir,sample_id=sample_ids,mate_index=[1, 2]),
        expand('{output_dir}/fastqc/{sample_id}_{mate_index}_fastqc.zip',output_dir=output_dir,sample_id=sample_ids,mate_index=[1, 2]),
        expand('{output_dir}/multiQC_summary/multiqc.html',output_dir=output_dir),
        expand('{output_dir}/dedup_bam/{sample_id}_dedup.bam',output_dir=output_dir,sample_id=sample_ids),
        expand('{output_dir}/dedup_bw/{sample_id}_dedup.bw',output_dir=output_dir,sample_id=sample_ids),
        expand('{output_dir}/macs2_callPeak/{sample_id}/',output_dir=output_dir,sample_id=sample_ids)

rule fastqc_pe:
    input:
        auto_gzip_input(config.get('data_dir') + '/fastq/{sample_id}_{mate_index}.fastq')
    output:
        html='{output_dir}/fastqc/{sample_id}_{mate_index}_fastqc.html',
        zip='{output_dir}/fastqc/{sample_id}_{mate_index}_fastqc.zip'
    params:
        output_prefix='{output_dir}/fastqc/',
        temp_dir=config['temp_dir']
    wildcard_constraints:
        mate_index='[12]'
    conda:
        "../envs/quality_control.yaml"
    threads:
        1
    log:
        '{output_dir}/log/quality_control/fastqc/{sample_id}_{mate_index}.log'
    shell:
        '''rm -rf {params.temp_dir};
            mkdir {params.temp_dir};
            fastqc -q -o {params.output_prefix} -d {params.temp_dir} {input} > {log} 2>&1
        '''

rule multiqc_pe:
    input:
        fastqc=expand('{output_dir}/fastqc/{sample_id}_{mate_index}_fastqc.zip',output_dir=output_dir, sample_id=sample_ids, mate_index=[1, 2])
    output:
        html='{output_dir}/multiQC_summary/multiqc.html',
        data=directory('{output_dir}/multiQC_summary/fastqc_data')
    params:
        fastqc_dir='{output_dir}/fastqc'
    wildcard_constraints:
        mate_index='[12]'
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    threads:
        1
    log:
        '{output_dir}/log/multiqc_pe/multiqc.log'
    shell:
        '''multiqc -m fastqc -n {output.html} {params.fastqc_dir} > {log} 2>&1
        '''

rule bowtie2_mapping:
    input:
        fastq1=auto_gzip_input(config.get('data_dir') + '/fastq/{sample_id}_1.fastq'),
        fastq2=auto_gzip_input(config.get('data_dir') + '/fastq/{sample_id}_2.fastq')
    output:
        sam_file='{output_dir}/bowtie2_mapping/{sample_id}.sam'
    params:
        bowtie2_index=config.get('genome_dir') + '/genome_index/bowtie2/genome',
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    threads:
        config.get('threads_mapping')
    log:
        '{output_dir}/log/bowtie2_mapping/{sample_id}.log'
    shell:
        '''
            bowtie2 -p {threads} --end-to-end -q -x {params.bowtie2_index} -1 {input.fastq1} -2 {input.fastq2} -S {output.sam_file} > {log} 2>&1
        '''

rule sam_to_bam:
    input:
        sam_file='{output_dir}/bowtie2_mapping/{sample_id}.sam'
    output:
        bam_file='{output_dir}/bowtie2_mapping/{sample_id}.bam'
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    threads:
        config.get('threads_mapping')
    log:
        '{output_dir}/log/bowtie2_mapping/{sample_id}.log'
    shell:
        '''
            samtools view -h {input.sam_file} | samtools sort -@ {threads} -o {output.bam_file}  > {log} 2>&1
        '''

rule remove_duplicates:
    input:
        bam_file='{output_dir}/bowtie2_mapping/{sample_id}.bam'
    output:
        dedup_bam_file='{output_dir}/dedup_bam/{sample_id}_dedup.bam',
        metrics_picard_file ='{output_dir}/dedup_bam/{sample_id}.dedup.txt'
    threads:
        1
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    log:
        '{output_dir}/log/dedup_bam/{sample_id}_dedup.log'
    shell:
        '''
            picard MarkDuplicates -INPUT {input.bam_file} -OUTPUT {output.dedup_bam_file} \
                -METRICS_FILE {output.metrics_picard_file} \
                -VALIDATION_STRINGENCY LENIENT -ASSUME_SORTED true -REMOVE_DUPLICATES true > {log} 2>&1
        '''

rule index_dudup_bam:
    input:
        dedup_bam_file='{output_dir}/dedup_bam/{sample_id}_dedup.bam'
    output:
        dedup_bam_index='{output_dir}/dedup_bam/{sample_id}_dedup.bam.bai'
    threads:
        config.get('threads_mapping')
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    log:
        '{output_dir}/log/index_dudup_bam/{sample_id}.log'
    shell:
        '''
            samtools index -@ {threads} {input.dedup_bam_file} {output.dedup_bam_index} > {log} 2>&1
        '''

rule bam_to_bw:
    input:
        dedup_bam_file='{output_dir}/dedup_bam/{sample_id}_dedup.bam',
        dedup_bam_index='{output_dir}/dedup_bam/{sample_id}_dedup.bam.bai'
    output:
        dedup_bw_file='{output_dir}/dedup_bw/{sample_id}_dedup.bw',
    threads:
        config.get('threads_compress')
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    log:
        '{output_dir}/log/dedup_bw/{sample_id}.log'
    shell:
        '''
            bamCoverage -p {threads} -b {input.dedup_bam_file} -o {output.dedup_bw_file} > {log} 2>&1
        '''

rule macs2_callPeak:
    input:
        dedup_bam_file='{output_dir}/dedup_bam/{sample_id}_dedup.bam'
    output:
        macs2_out_dir='{output_dir}/macs2_callPeak/{sample_id}/{sample_id}_summits.bed'
    params:
        sample_name='{sample_id}'
    threads:
        1
    conda:
        '../envs/seal_methyl-cap_medip.yaml'
    log:
        '{output_dir}/log/macs2_callPeak/{sample_id}.log'
    shell:
        '''
            macs2 callpeak -t {input.dedup_bam_file} -g hs --nomodel --extsize 200 -n {params.sample_name} --outdir {output.macs2_out_dir} --call-summits
        ''' 